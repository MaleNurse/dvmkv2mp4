#!/bin/bash

start=`date +%s`
echo "Starting Conversions `date`"
for f in *.mkv;do
  input="$f"
  ffstart5_8="ffmpeg -i \"$input\"  -loglevel error -stats -map 0:0 -c:v copy -vbsf hevc_mp4toannexb -f hevc BL_RPU.hevc"
  ffstart7_1="ffmpeg -i \"$input\"  -loglevel error -stats -map 0:0 -c:v copy -vbsf hevc_mp4toannexb -f hevc -"
  ffstart7_2="ffmpeg -i \"$input\"  -loglevel error -stats -map 0:v:0 -c:v copy -vbsf hevc_mp4toannexb -f hevc BL.hevc -map 0:v:1 -c:v copy -vbsf hevc_mp4toannexb -f hevc -"
  ffend7_1="| dovi_tool -m 2 convert --discard -"
  ffend7_2="| dovi_tool -m 2 extract-rpu - -o RPU.bin; dovi_tool inject-rpu -i BL.hevc --rpu-in RPU.bin -o BL_RPU.hevc; rm BL.hevc RPU.bin"
  
  dv_profile=$(mediainfo "$input" | grep "HDR format.*dvhe\." | sed 's/.*dvhe\.0\(.\).*/\1/')
  if [ -z "$dv_profile" ] || [ -f "${input}.dvconverting"]; then
    return 0
  fi
  if { [ "$dv_profile" -ne 4 ] && [ "$dv_profile" -ne 5 ] && [ "$dv_profile" -ne 7 ] && [ "$dv_profile" -ne 8 ]; } ; then
  info "Unsupported Dolby Vision profile '$dv_profile'; doing nothing"
    return 0
  fi
  vscount=`ffprobe -loglevel error -select_streams v -show_entries stream=type:stream=codec_name:stream=index:stream_tags=language:stream_tags=title -of csv=p=0 "$input" | grep hevc | wc -l`
  
  
  echo "Converting DV$dv_profile: \"$input\""
  touch "${input}.dvconverting"
  as=`ffprobe -loglevel error -select_streams a -show_entries stream=type:stream=codec_name:stream=index:stream_tags=language:stream_tags=title -of csv=p=0 "$input" | grep 'und\|eng\|pol' | sed 's/,/\|/g'`
  if [ "$as" == "" ]; then
    ffprobe -loglevel error -select_streams a -show_entries stream=type:stream=codec_name:stream=index:stream_tags=language:stream_tags=title -of csv=p=0 "$input" | sed 's/,/\|/g' > tracks.list
  else
    echo "$as" > tracks.list
  fi
  ffprobe -loglevel error -select_streams s -show_entries stream=type:stream=codec_name:stream=index:stream_tags=language:stream_tags=title -of csv=p=0 "$input" | grep 'und\|eng\|pol' | sed 's/,/\|/g' >> tracks.list
  if [ "$dv_profile" -eq 4 ] || [ "$dv_profile" -eq 5 ] || [ "$dv_profile" -eq 8 ];then
    ffstring=("$ffstart5_8")
  elif [ "$dv_profile" -eq 7 ] && [ "$vscount" -eq 1 ];then
    ffstring=("$ffstart7_1")
  else
    ffstring=("$ffstart7_2")
  fi
  if [ "$dv_profile" -eq 5 ]; then
    dv_target=5
  elif [ "$dv_profile" -eq 4 ]; then
    dv_target=4
  else
    dv_target=8
  fi
  output=${input%.mkv}
  while read i;do
    id=`echo "$i" | cut -f1 -d\|`
    codec=`echo "$i" | cut -f2 -d\|`
    lang=`echo "$i" | cut -f3 -d\|`
    title=`echo "$i" | cut -f4 -d\|`
    ffopts=""
    if [ "$codec" == "truehd" ]; then
      ffopts="-map 0:$id -b:a:0 1536k -c:a:0 eac3 -f eac3 $id.$lang.eac3"
      echo "$id.$lang.eac3|eac3|$id|$codec|$lang|$title" >> audio.exports
    fi
    if [ "$codec" == "eac3" ]; then
      ffopts="-map 0:$id -c:a:0 copy $id.$lang.eac3"
      echo "$id.$lang.eac3|eac3|$id|$codec|$lang|$title" >> audio.exports
    fi
    if [ "$codec" == "dts" ]; then
      ffopts="-map 0:$id -b:a:0 1536k -c:a:0 eac3 -f eac3 $id.$lang.eac3"
      echo "$id.$lang.eac3|eac3|$id|$codec|$lang|$title" >> audio.exports
    fi
    if [ "$codec" == "ac3" ]; then
      ffopts="-map 0:$id -c:a:0 copy $id.$lang.ac3"
      echo "$id.$lang.ac3|ac3|$id|$codec|$lang|$title" >> audio.exports
    fi
    if [ "$codec" == "ass" ]; then
      ffopts="-map 0:$id -c:s:0 copy \"$output.${lang}${id}.ass\" -map 0:$id -c:s:0 srt \"$output.${lang}${id}.srt\""
      echo "$output.${lang}${id}.ass|$id|ass|$codec|$lang|$title" >> sub.exports
      echo "$output.${lang}${id}.srt|$id|srt|$codec|$lang|$title" >> sub.exports
    fi
    if [ "$codec" == "srt" ] || [ "$codec" == "subrip" ]; then
      ffopts="-map 0:$id -c:s:0 copy \"$output.${lang}${id}.srt\""
      echo "$output.${lang}${id}.srt|$id|srt|$codec|$lang|$title" >> sub.exports
    fi
    if [ "$codec" == "hdmv_pgs_subtitle" ]; then
      ffopts="-map 0:$id -c:s:0 copy \"$output.${lang}${id}.sup\""
      echo "$output.${lang}${id}.sup|$id|srt|$codec|$lang|$title" >> sub.exports
    fi
    ffstring+=($ffopts)
  done <<< "$(cat tracks.list)"
  while read i;do
    id=`echo "$i" | cut -f1 -d\|`
    codec=`echo "$i" | cut -f2 -d\|`
    lang=`echo "$i" | cut -f3 -d\|`
    title=`echo "$i" | cut -f4 -d\| | sed 's/ /-/g'`
    ffopts="-map 0:$id"
    ffstring+=($ffopts)
  done <<< "$(cat tracks.list)"
  ffstring+=("-c copy -f matroska \"${input%.mkv}.asm\"")
  if [ "$dv_profile" -eq 7 ] && [ "$vscount" -eq 1 ];then
    ffstring+=("$ffend7_1")
  elif [ "$dv_profile" -eq 7 ] && [ "$vscount" -eq 2 ];then
    ffstring+=("$ffend7_2")
  fi
  echo ${ffstring[*]}
  eval ${ffstring[*]}
  >| "$input"
  mkvextract chapters -s "${input%.mkv}.asm" > chapters.list
  mp4string=("MP4Box -add BL_RPU.hevc:dv-profile=$dv_target")
  tcount=2
  while read i;do
    stream=`echo "$i" | cut -f1 -d\|`
    codec=`echo "$i" | cut -f2 -d\|`
    id=`echo "$i" | cut -f3 -d\|`
    lang=`echo "$i" | cut -f5 -d\|`
    orig_codec=lang=`echo "$i" | cut -f4 -d\|`
    title=`echo "$i" | cut -f6 -d\|`
    mp4opts="-add \"$stream\":sopt:gfreg=ffdmx -lang $tcount=$lang"
    mp4string+=($mp4opts)
    tcount=$((tcount+1))
  done <<< "$(cat audio.exports)"
  if [ -s "chapters.list" ]; then
    mp4string+=("-chap chapters.list")
  fi
  mp4string+=("-brand mp42isom -ab dby1 \"$output.mp4\"")
  echo ${mp4string[*]}
  eval ${mp4string[*]}
  rm BL_RPU.hevc
  while read i;do
    rm "`echo "$i" | cut -f1 -d\|`"
  done <<< "$(cat audio.exports)"
  while read i;do
    stream=`echo "$i" | cut -f1 -d\|`
    lang=`echo "$i" | cut -f5 -d\|`
    docker run --rm -v "`pwd`":/data -e INPUT="/data/$stream" -e OUTPUT="/data/${stream%.sup}.srt" -e LANGUAGE=$lang tentacule/pgstosrt
  done <<< "$(cat sub.exports | grep hdmv_pgs)"
  rm audio.exports
  rm sub.exports
  rm tracks.list
  rm chapters.list
  rm "${input}.dvconverting"
  rm "$input"
done
end=`date +%s`
runtime=$((end-start))
hours=$((runtime / 3600)); minutes=$(( (runtime % 3600) / 60 )); seconds=$(( (runtime % 3600) % 60 )); 
echo "Conversions runtime: $hours:$minutes:$seconds (hh:mm:ss)"
